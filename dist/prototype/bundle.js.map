{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/Main.ts","src/js/forms/Consent.ts","src/js/forms/TestingComplete.ts","src/js/io/ImageComparison.ts","src/js/io/TaskDisplay.ts","src/js/io/UserInterface.ts","src/js/io/index.ts","src/js/metrics/index.ts","src/js/metrics/time/LimitedTimer.ts","src/js/metrics/time/Timer.ts","src/js/metrics/time/UnlimitedTimer.ts","src/js/tasks/ImageOption.ts","src/js/tasks/Option.ts","src/js/tasks/Task.ts","src/js/tasks/TaskList.ts","src/js/tasks/TaskResult.ts","src/js/tasks/index.ts","src/js/tests/Sample3DRotation/Sample3DInstructions.ts","src/js/tests/Sample3DRotation/Sample3DRotation.ts","src/js/tests/SampleCard/SampleCard.ts","src/js/tests/SampleComparison/SampleComparison.ts","src/js/tests/SampleComparison/SampleComparisonInstruction.ts","src/js/tests/SampleFold/SampleFold.ts","src/js/tests/SampleFold/SampleFoldInstruction.ts","src/js/tests/SampleImageMockup/SampleImageMockup.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","display","testList","task","uiUpdateTimer","TaskList_1","UserInterface_1","SampleComparison_1","SampleComparisonInstruction_1","Consent_1","TestingComplete_1","Sample3DInstructions_1","Sample3DRotation_1","SampleFold_1","SampleFoldInstruction_1","SampleCard_1","SampleImageMockup_1","NextTask","clearInterval","IsComplete","DisplayTask","TestingComplete","Next","timer","GetTimer","Begin","setInterval","Tick","SetTimerProgress","Math","ceil","Progress","WaitForCompletion","_a","sent","IsResultsTracked","SetTitle","GetTitle","SetOptionsPrompt","GetPrompt","ShowOptions","GetDisplay","Display","IsConfidenceTracked","ShowConfidenceSlider","HideConfidenceSlider","$","graph3dinst","SampleComparisonInstruction","graph3d","SampleComparison","contour","SetPrompt","scatterplot","SampleImageMockup","SetCofidenceTracked","scatterplothover","UserInterface","TaskList","Consent","Sample3DInstruction","Sample3DRotation","SampleFoldInstruction","SampleFold","SampleCard","click","_super","tasks_1","io_1","metrics_1","Task","__extends","prototype","OptionSelected","selectedOptions","this","Complete","GetOptions","UnlimitedTimer","_this","ConsentForm","TaskDisplay","screen","ViewModeContent","ContentContainer","html","template","evt","isChecked","target","prop","TestingCompleteDisplay","ViewModeTestsComplete","_1","ImageComparison","ViewModeComparison","OriginalViewContainer","ImageHtml","originalSrc","ComparisonViewContainer","compareSrc","src","title","titleContainer","prompt","promptContainer","progress","timerBar","css","optionsContainer","options","option","Template","element","Id","this_1","append","contentContainer","originalView","comparisonView","hide","completionContainer","comparisonContainer","show","confidenceArea","TaskDisplay_1","ImageComparison_1","Timer_1","Timer","LimitedTimer_1","LimitedTimer","UnlimitedTimer_1","startTime","ElapsedTime","duration","Date","now","Option_1","ImageOption","Option","imageSrc","id","Name","name","TaskResult_1","promise","resolve","result","reason","reject","SetTimer","track","trackConfidence","SetResultsTracked","trackResults","Promise","TaskResult","tests","currentIndex","ImageOption_1","Task_1","SampleRotationInstructionDisplay","SampleRotationDisplay","CardDisplay","CardOption","SameRadioId","DifferentRadioId","IsSameSelected","IsDifferentSelected","image1","image2","FoldDisplay","SampleFoldInstructionForm","ImageDisplay","imagesrc"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {TaskResult} from \"./tasks/TaskResult\";\r\nimport {Task} from \"./tasks/Task\";\r\nimport {TaskList} from \"./tasks/TaskList\";\r\nimport {UserInterface} from \"./io/UserInterface\";\r\n\r\nimport { Timer } from \"./metrics\";\r\nimport {SampleComparison} from \"./tests/SampleComparison/SampleComparison\";\r\nimport {SampleComparisonInstruction} from \"./tests/SampleComparison/SampleComparisonInstruction\";\r\nimport { SampleTimedTest } from \"./tests/SampleTimedTest/SampleTimedTest\";\r\nimport { Consent } from \"./forms/Consent\";\r\nimport { TestingComplete } from \"./forms/TestingComplete\";\r\nimport { Sample3DInstruction } from \"./tests/Sample3DRotation/Sample3DInstructions\";\r\nimport { Sample3DRotation } from \"./tests/Sample3DRotation/Sample3DRotation\";\r\nimport { SampleFold } from \"./tests/SampleFold/SampleFold\";\r\nimport { SampleFoldInstruction } from \"./tests/SampleFold/SampleFoldInstruction\";\r\nimport { SampleCard } from \"./tests/SampleCard/SampleCard\";\r\nimport { SampleImageMockup } from \"./tests/SampleImageMockup/SampleImageMockup\";\r\n\r\nlet display : UserInterface;\r\nlet testList : TaskList;\r\nlet task : Task;\r\n\r\nlet uiUpdateTimer : any;\r\n\r\n$(() =>\r\n{\r\n\tlet graph3dinst = new SampleComparisonInstruction(\r\n\t\t\"images/3dgraph1.png\",\r\n\t\t\"images/3dgraph2.png\"\r\n\t)\r\n\tlet graph3d = new SampleComparison(\r\n\t\t\"images/3dgraph1.png\",\r\n\t\t\"images/3dgraph2.png\"\r\n\t);\r\n\r\n\tlet contour = new SampleComparison(\r\n\t\t\"images/Contour_Plot.jpg\",\r\n\t\t\"images/3D_Surface.jpg\"\r\n\t);\r\n\tcontour.SetPrompt(\"Does the graph match the contour?\");\r\n\r\n\tlet scatterplot = new SampleImageMockup(\"images/scatterplotmain.png\");\r\n\tscatterplot.SetCofidenceTracked(true);\r\n\tlet scatterplothover = new SampleImageMockup(\"images/scatterplothover.png\");\r\n\tscatterplothover.SetCofidenceTracked(true);\r\n\r\n\tdisplay = new UserInterface();\r\n\ttestList  = new TaskList([\r\n\t\tnew Consent(),\r\n\r\n\t\t//Graph\r\n\t\tnew SampleComparisonInstruction(\r\n\t\t\t\"images/sample_graph_1.png\",\r\n\t\t\t\"images/sample_graph_2.png\"\r\n\t\t),\r\n\t\tnew SampleComparison(\r\n\t\t\t\"images/sample_graph_1.png\",\r\n\t\t\t\"images/sample_graph_2.png\"\r\n\t\t),\r\n\r\n\t\t//3D Graph\r\n\t\tgraph3dinst,\r\n\t\tgraph3d,\r\n\r\n\t\t//Piechart\r\n\t\tnew SampleComparisonInstruction(\r\n\t\t\t\"images/sample-piechart.png\",\r\n\t\t\t\"images/sample-piechart-rotated.png\"\t\r\n\t\t),\r\n\t\tnew SampleComparison(\r\n\t\t\t\"images/sample-piechart.png\",\r\n\t\t\t\"images/sample-piechart-rotated.png\"\t\r\n\t\t),\r\n\r\n\t\t//3d Rotation\r\n\t\tnew Sample3DInstruction(),\r\n\t\tnew Sample3DRotation(),\r\n\r\n\t\t// Paper Folding\r\n\t\tnew SampleFoldInstruction(),\r\n\t\tnew SampleFold(),\r\n\r\n\t\t// Card rotation\r\n\t\tnew SampleCard(),\r\n\r\n\t\t// Contour\r\n\t\tcontour,\r\n\r\n\t\t//Scatter Plot\r\n\t\tscatterplot,\r\n\t\tscatterplothover,\r\n\t]);\r\n\r\n\tApplyPageEventHandlers();\r\n\t\r\n\tNextTask();\r\n});\r\n\r\nfunction ApplyPageEventHandlers()\r\n{\r\n\t$(\".next\").click(() =>\r\n\t{\r\n\t\tNextTask();\r\n\t});\r\n}\r\n\r\nasync function NextTask() : Promise<void>\r\n{\r\n\tclearInterval(uiUpdateTimer);\r\n\r\n\tif (testList.IsComplete())\r\n\t{\r\n\t\tAllTestsCompleted();\r\n\t\treturn;\r\n\t}\r\n\r\n\ttask = testList.Next();\r\n\tlet timer : Timer = task.GetTimer();\r\n\r\n\tDisplayTask(task);\r\n\t\r\n\ttimer.Begin();\r\n\tuiUpdateTimer = setInterval(() =>\r\n\t\t{\r\n\t\t\t//TODO js setinterval is inconsistent, timer is jumpy at points\r\n\t\t\t//  Possible solutions:\r\n\t\t\t//     - Really low time interval (timers internally use accurate time so they'll be fine)\r\n\t\t\t//     so function runs more\r\n\t\t\t//     - Look for more consistent timer implementation\r\n\t\t\ttimer.Tick();\r\n\t\t\tdisplay.SetTimerProgress(Math.ceil(timer.Progress()));\r\n\t\t},\r\n\t\t10\r\n\t);\r\n\t\r\n\tlet result : TaskResult = await task.WaitForCompletion();\r\n\r\n\tif (task.IsResultsTracked())\r\n\t{\r\n\t\t//TODO submit results somewhere\r\n\t}\r\n\r\n\tNextTask();\r\n}\r\n\r\nfunction AllTestsCompleted()\r\n{\r\n\tDisplayTask(new TestingComplete());\r\n}\r\n\r\nfunction DisplayTask(task : Task)\r\n{\r\n\tdisplay.SetTitle(task.GetTitle());\r\n\tdisplay.SetOptionsPrompt(task.GetPrompt());\r\n\tdisplay.ShowOptions(task);\r\n\ttask.GetDisplay().Display(display);\r\n\r\n\tif (task.IsConfidenceTracked())\r\n\t\tdisplay.ShowConfidenceSlider();\r\n\telse\r\n\t\tdisplay.HideConfidenceSlider();\r\n}","import { Task, Option, TaskResult } from \"../tasks\";\r\nimport { UserInterface, TaskDisplay } from \"../io\";\r\nimport { Timer, UnlimitedTimer } from \"../metrics\";\r\n\r\nexport class Consent extends Task\r\n{\r\n\tdisplay : ConsentForm = new ConsentForm(this);\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.SetTitle(\"Consent Form\");\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [];\r\n\t}\r\n\t\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn this.display;\r\n\t}\r\n\r\n\tGetTimer(): Timer\r\n\t{\r\n\t\treturn new UnlimitedTimer();\r\n\t}\r\n}\r\n\r\nclass ConsentForm extends TaskDisplay\r\n{\r\n\tprivate task : Task;\r\n\tprivate template : string;\r\n\r\n\tconstructor(task : Task)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.task = task;\r\n\r\n\t\tthis.template =\r\n\t\t`<div style=\"width: 60%\">\r\n\t\t\t<p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition. Organically grow the holistic world view of disruptive innovation via workplace diversity and empowerment.</p>\r\n\t\t\t<hr />\r\n\t\t\t<p>Bring to the table win-win survival strategies to ensure proactive domination. At the end of the day, going forward, a new normal that has evolved from generation X is on the runway heading towards a streamlined cloud solution. User generated content in real-time will have multiple touchpoints for offshoring.</p>\r\n\t\t\t<hr />\r\n\t\t\t<div>\r\n\t\t\t\t<input id=\"chk-consent\" type=\"checkbox\" class=\"form-check-input\" />\r\n\t\t\t\t<label class=\"form-check-label\" for=\"exampleCheck1\">I consent to the terms above and agree to do the test</label>\r\n\t\t\t\t<div><button id=\"btn-consent\" class=\"btn btn-primary\" disabled>Next</button></div>\r\n\t\t\t</div>\r\n\t\t</div>`;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t\t\r\n\t\t$(\"#chk-consent\").click((evt)=>\r\n\t\t{\r\n\t\t\tlet isChecked : boolean = $(evt.target).prop(\"checked\");\r\n\t\t\t$(\"#btn-consent\").prop(\"disabled\", !isChecked);\r\n\t\t});\r\n\r\n\t\t$(\"#btn-consent\").click(() =>\r\n\t\t{\r\n\t\t\tthis.task.Complete();\r\n\t\t});\r\n\t}\r\n\r\n}","import { Task, Option, TaskResult } from \"../tasks\";\r\nimport { UserInterface, TaskDisplay } from \"../io\";\r\nimport { Timer, UnlimitedTimer } from \"../metrics\";\r\n\r\nexport class TestingComplete extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthrow new Error(\"Method not implemented.\");\r\n\t}\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new TestingCompleteDisplay();\r\n\t}\r\n\r\n\tGetTimer(): Timer\r\n\t{\r\n\t\treturn new UnlimitedTimer();\r\n\t}\r\n}\r\n\r\nclass TestingCompleteDisplay extends TaskDisplay\r\n{\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeTestsComplete();\r\n\t}\r\n}","import { TaskDisplay, UserInterface } from \".\";\r\n\r\nexport class ImageComparison extends TaskDisplay\r\n{\r\n\tprivate originalSrc : string;\r\n\tprivate compareSrc : string;\r\n\r\n\tconstructor(originalSrc : string, compareSrc : string)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.originalSrc = originalSrc;\r\n\t\tthis.compareSrc = compareSrc;\r\n\t}\r\n\r\n\tDisplay(screen : UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeComparison();\r\n\r\n\t\tscreen.OriginalViewContainer()\r\n\t\t\t.html(this.ImageHtml(this.originalSrc));\r\n\t\t\r\n\t\tscreen.ComparisonViewContainer()\r\n\t\t\t.html(this.ImageHtml(this.compareSrc));\r\n\t}\r\n\r\n\tprivate ImageHtml(src : string)\r\n\t{\r\n\t\treturn `<img src=\"${src}\" alt=\"Failed to load image\" style=\"height: 100%; max-height: 500px;\"/>`;\r\n\t}\r\n}","import {UserInterface} from \"./UserInterface\";\r\n\r\nexport abstract class TaskDisplay\r\n{\r\n\tabstract Display(screen : UserInterface) : void;\r\n}","import {Option, Task} from \"../tasks\";\r\n\r\nexport class UserInterface\r\n{\r\n\tprotected titleContainer : JQuery<HTMLElement>;\r\n\tprotected promptContainer : JQuery<HTMLElement>;\r\n\tprotected timerBar : JQuery<HTMLElement>;\r\n\tprotected optionsContainer : JQuery<HTMLElement>;\r\n\t\r\n\tprotected contentContainer : JQuery<HTMLElement>;\r\n\r\n\tprotected comparisonContainer : JQuery<HTMLElement>;\r\n\tprotected originalView : JQuery<HTMLElement>\r\n\tprotected comparisonView : JQuery<HTMLElement>;\r\n\r\n\tprotected completionContainer : JQuery<HTMLElement>;\r\n\r\n\tprotected confidenceArea : JQuery<HTMLElement>;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.titleContainer = $(\"#title\");\r\n\t\tthis.promptContainer = $(\"#prompt\");\r\n\t\tthis.timerBar = $(\"#test-timer\");\r\n\t\tthis.optionsContainer = $(\"#options\");\r\n\r\n\t\tthis.contentContainer = $(\"#content-single\");\r\n\r\n\t\tthis.comparisonContainer = $(\"#comparison-area\");;\r\n\t\tthis.originalView = $(\"#test-original\");\r\n\t\tthis.comparisonView = $(\"#test-compare\");\r\n\r\n\t\tthis.completionContainer = $(\"#completion-window\");\r\n\r\n\t\tthis.confidenceArea = $(\"#feedback\");\r\n\t}\r\n\r\n\tSetTitle(title : string) : void\r\n\t{\r\n\t\tthis.titleContainer.html(title);\r\n\t}\r\n\r\n\tSetOptionsPrompt(prompt : string) : void\r\n\t{\r\n\t\tthis.promptContainer.html(prompt);\r\n\t}\r\n\r\n\tSetTimerProgress(progress : number) : void\r\n\t{\r\n\t\tthis.timerBar.css(\"width\", progress + \"%\");\r\n\t}\r\n\r\n\tShowOptions(task : Task) : void\r\n\t{\r\n\t\tthis.optionsContainer.html(\"\");\r\n\r\n\t\tlet options = task.GetOptions();\r\n\r\n\t\tfor (let i = 0; i < options.length; i++)\r\n\t\t{\r\n\t\t\tlet option = options[i];\r\n\t\t\tlet template = options[i].Template();\r\n\t\t\tlet element = $(template);\r\n\r\n\t\t\telement.prop(\"data-option-id\", option.Id);\r\n\t\t\telement.click(() =>\r\n\t\t\t{\r\n\t\t\t\ttask.OptionSelected(option);\r\n\t\t\t});\r\n\r\n\t\t\tthis.optionsContainer.append(element);\r\n\t\t}\r\n\t}\r\n\r\n\tContentContainer() : JQuery<HTMLElement>\r\n\t{\r\n\t\treturn this.contentContainer;\r\n\t}\r\n\r\n\tOriginalViewContainer() : JQuery<HTMLElement>\r\n\t{\r\n\t\treturn this.originalView;\r\n\t}\r\n\r\n\tComparisonViewContainer() : JQuery<HTMLElement>\r\n\t{\r\n\t\treturn this.comparisonView;\r\n\t}\r\n\r\n\tViewModeComparison()\r\n\t{\r\n\t\tthis.contentContainer.hide();\r\n\t\tthis.completionContainer.hide();\r\n\r\n\t\tthis.comparisonContainer.show();\r\n\t}\r\n\r\n\tViewModeContent()\r\n\t{\r\n\t\tthis.comparisonContainer.hide();\r\n\t\tthis.completionContainer.hide();\r\n\r\n\t\tthis.contentContainer.show();\r\n\t}\r\n\r\n\tViewModeTestsComplete()\r\n\t{\r\n\t\tthis.comparisonContainer.hide();\r\n\t\tthis.contentContainer.hide();\r\n\t\t\r\n\t\tthis.completionContainer.show();\r\n\t}\r\n\r\n\tShowConfidenceSlider()\r\n\t{\r\n\t\tthis.confidenceArea.show();\r\n\t}\r\n\r\n\tHideConfidenceSlider()\r\n\t{\r\n\t\tthis.confidenceArea.hide();\r\n\t}\r\n}","import {UserInterface} from \"./UserInterface\";\r\nimport {TaskDisplay} from \"./TaskDisplay\";\r\n\r\nimport {ImageComparison} from \"./ImageComparison\";\r\n\r\nexport {\r\n\tUserInterface,\r\n\tTaskDisplay,\r\n\t\r\n\tImageComparison\r\n}","import {Timer} from \"./time/Timer\";\r\nimport {LimitedTimer} from \"./time/LimitedTimer\";\r\nimport {UnlimitedTimer} from \"./time/UnlimitedTimer\";\r\n\r\nexport {\r\n\tTimer,\r\n\tLimitedTimer,\r\n\tUnlimitedTimer\r\n};","import {Timer} from \"./Timer\";\r\nimport {Task, TaskResult} from \"../../tasks\";\r\n\r\nexport class LimitedTimer extends Timer\r\n{\r\n\tprivate duration : number;\r\n\tprivate task : Task;\r\n\r\n\tconstructor(task : Task, duration: number)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.task = task;\r\n\t\tthis.duration = duration;\r\n\t}\r\n\r\n\tTick()\r\n\t{\r\n\t\tif (this.Progress() >= 100)\r\n\t\t{\r\n\t\t\t//TODO make special result for timeout?\r\n\t\t\tthis.task.Complete();\r\n\t\t}\r\n\t}\r\n\r\n\tProgress(): number\r\n\t{\r\n\t\tlet progress : number = this.startTime == 0? 0 : (this.ElapsedTime() / this.duration) * 100;\r\n\t\tprogress = progress > 100? 100 : progress;\r\n\r\n\t\treturn progress;\r\n\t}\r\n}","export abstract class Timer\r\n{\r\n\tprotected startTime : number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.startTime = 0;\r\n\t}\r\n\r\n\tBegin() : void\r\n\t{\r\n\t\tthis.startTime = Date.now();\r\n\t}\r\n\r\n\tElapsedTime() : number\r\n\t{\r\n\t\treturn Date.now() - this.startTime;\r\n\t}\r\n\r\n\tabstract Tick() : void;\r\n\tabstract Progress() : number;\r\n}","import {Timer} from \"./Timer\";\r\n\r\nexport class UnlimitedTimer extends Timer\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tTick() : void\r\n\t{\r\n\t}\r\n\r\n\tProgress(): number\r\n\t{\r\n\t\treturn 0;\r\n\t}\r\n}","import {Option} from \"./Option\";\r\n\r\nexport class ImageOption extends Option\r\n{\r\n\timageSrc : string;\r\n\r\n\tconstructor (id: number, imageSrc : string)\r\n\t{\r\n\t\tsuper(id, \"\");\r\n\t\tthis.imageSrc = imageSrc;\r\n\t}\r\n\r\n\tTemplate() : string\r\n\t{\r\n\t\treturn `<div style=\"flex: 1; display: flex; justify-content: center; cursor: pointer;\"><img src=\"${this.imageSrc}\" /></div>`\r\n\t}\r\n}","export class Option\r\n{\r\n\tId: number;\r\n\tName : string;\r\n\r\n\tconstructor(id : number, name : string)\r\n\t{\r\n\t\tthis.Id = id;\r\n\t\tthis.Name = name;\r\n\t}\r\n\r\n\tTemplate() : string\r\n\t{\r\n\t\t//TODO add onclick that can actually end the test\r\n\t\treturn `<button type=\"button\" class=\"btn secondary\">${this.Name}</button>`;\r\n\t}\r\n}","import {Option} from \"./Option\";\r\nimport {TaskResult} from \"./TaskResult\";\r\nimport {TaskDisplay} from \"../io\";\r\nimport {Timer, UnlimitedTimer} from \"../metrics\";\r\n\r\nexport abstract class Task\r\n{\r\n\tprotected result : TaskResult;\r\n\r\n\tprivate promise : Promise<TaskResult>;\r\n\tprotected resolve : (result : TaskResult) => any;\r\n\tprotected reject : (reason : any) => any;\r\n\r\n\tprivate title : string;\r\n\tprivate prompt : string;\r\n\tprivate timer : Timer;\r\n\tprivate trackConfidence : boolean;\r\n\tprivate trackResults : boolean;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.resolve = (result : TaskResult) => null;\r\n\t\tthis.reject = (reason : any) => null;\r\n\r\n\t\tthis.promise = new Promise<TaskResult>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.resolve = resolve;\r\n\t\t\tthis.reject = reject;\r\n\t\t});\r\n\t\t\r\n\t\tthis.result = new TaskResult();\r\n\r\n\t\tthis.title = \"\";\r\n\t\tthis.prompt = \"\";\r\n\t\tthis.timer = new UnlimitedTimer();\r\n\t\tthis.trackConfidence = false;\r\n\t\tthis.trackResults = false;\r\n\t}\r\n\r\n\tasync WaitForCompletion() : Promise<TaskResult>\r\n\t{\r\n\t\treturn this.promise;\r\n\t}\r\n\r\n\tComplete() : void\r\n\t{\r\n\t\tthis.resolve(this.result);\r\n\t}\r\n\r\n\tError(reason : any)\r\n\t{\r\n\t\tthis.reject(reason);\r\n\t}\r\n\r\n\tabstract OptionSelected(selectedOptions : Option) : void;\r\n\r\n\tabstract GetOptions() : Option[];\r\n\tabstract GetDisplay() : TaskDisplay;\r\n\r\n\tSetTitle(title : string) : void\r\n\t{\r\n\t\tthis.title = title;\r\n\t}\r\n\r\n\tGetTitle() : string\r\n\t{\r\n\t\treturn this.title;\r\n\t}\r\n\r\n\tSetPrompt(prompt : string) : void\r\n\t{\r\n\t\tthis.prompt = prompt;\t\r\n\t}\r\n\tGetPrompt() : string\r\n\t{\r\n\t\treturn this.prompt;\r\n\t}\r\n\r\n\tSetTimer(timer : Timer) : void\r\n\t{\r\n\t\tthis.timer = timer;\r\n\t}\r\n\tGetTimer() : Timer\r\n\t{\r\n\t\treturn this.timer;\r\n\t}\r\n\r\n\tSetCofidenceTracked(track : boolean) : void\r\n\t{\r\n\t\tthis.trackConfidence = track;\t\r\n\t}\r\n\tIsConfidenceTracked() : boolean\r\n\t{\r\n\t\treturn this.trackConfidence;\r\n\t}\r\n\r\n\tSetResultsTracked(track : boolean) : void\r\n\t{\r\n\t\tthis.trackResults = track;\t\r\n\t}\r\n\tIsResultsTracked() : boolean\r\n\t{\r\n\t\treturn this.trackResults;\r\n\t}\r\n}","import {Task} from \"./Task\";\r\n\r\nexport class TaskList\r\n{\r\n\tcurrentIndex : number;\r\n\ttests : Task[];\r\n\r\n\tconstructor(tests : Task[])\r\n\t{\r\n\t\tthis.currentIndex = 0;\r\n\t\tthis.tests = tests;\r\n\t}\r\n\r\n\tNext() : Task\r\n\t{\r\n\t\treturn this.tests[this.currentIndex++];\r\n\t}\r\n\r\n\tIsComplete() : boolean\r\n\t{\r\n\t\treturn this.currentIndex >= this.tests.length;\r\n\t}\r\n}","export class TaskResult\r\n{\r\n\t//TODO flesh out metrics we'll track for test results\r\n}","import {Option} from \"./Option\";\r\nimport {ImageOption} from \"./ImageOption\";\r\nimport {TaskResult} from \"./TaskResult\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskList} from \"./TaskList\";\r\n\r\nexport {\r\n\tOption,\r\n\tImageOption,\r\n\tTaskResult,\r\n\tTask,\r\n\tTaskList\r\n};","import {Task, Option, TaskResult} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class Sample3DInstruction extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.SetTitle(\"Instructions\");\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new Option(0, \"Try it out\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new SampleRotationInstructionDisplay();\r\n\t}\r\n\r\n\tGetTimer(): Timer\r\n\t{\r\n\t\treturn new UnlimitedTimer();\r\n\t}\r\n}\r\n\r\nclass SampleRotationInstructionDisplay extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<p>You will be shown an image of a 3d object which has been rotated</p>`\r\n\t\t+ `<img src=\"images/rotation1.png\" />`\r\n\t\t+ `<p>You will then be shown another 3d object, and a set of rotated versions of that object</p>`\r\n\t\t+ `<img src=\"images/rotation2.png\" />`\r\n\t\t+ `<img src=\"images/rotationOptions.png\" />`\r\n\t\t+ `<p>choose the image that represents an equivalent roation from the first object on the second one</p>`\r\n\t\t;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import {Task, Option, TaskResult, ImageOption} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class Sample3DRotation extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t\tthis.SetResultsTracked(false);\r\n\t}\r\n\t\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new ImageOption(0, \"images/rotationOptions.png\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new SampleRotationDisplay();\r\n\t}\r\n}\r\n\r\nclass SampleRotationDisplay extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template =\r\n\t\t\t`<img src=\"images/rotation1.png\" />`\r\n\t\t\t+ `<img src=\"images/rotation2.png\" />`\r\n\t\t\t;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import {Task, Option, ImageOption, TaskResult} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class SampleCard extends Task\r\n{\r\n\tprivate options : Option[];\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.options = [\r\n\t\t\tnew CardOption(0, \"images/cardOpt1.png\"),\r\n\t\t\tnew CardOption(1, \"images/cardOpt2.png\"),\r\n\t\t\tnew CardOption(2, \"images/cardOpt3.png\"),\r\n\t\t\tnew CardOption(3, \"images/cardOpt4.png\"),\r\n\t\t];\r\n\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn this.options;\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new CardDisplay(\"images/card.png\");\r\n\t}\r\n}\r\n\r\nclass CardOption extends ImageOption\r\n{\r\n\tTemplate() : string\r\n\t{\r\n\t\tlet template = `<div style=\"flex: 1; display: flex; justify-content: center; align-items: center; flex-direction: column;\">\r\n\t\t\t<img src=\"${this.imageSrc}\" style=\"width: 100px; height: 100px;\"/>`\r\n\r\n\t\tlet radio = `\r\n\t\t<div>\r\n\t\t\t<input type=\"radio\" id=\"${this.SameRadioId()}\" name=\"${this.Id}\" value=\"${this.SameRadioId()}\" />\r\n\t\t\t<label for=\"${this.SameRadioId()}\">Same</label><br />\r\n\r\n\t\t\t<input type=\"radio\" id=\"${this.DifferentRadioId()}\" name=\"${this.Id}\" value=\"${this.DifferentRadioId()}\" />\r\n\t\t\t<label for=\"${this.DifferentRadioId()}\">Different</label>\r\n\t\t</div>\r\n\t\t`;\r\n\t\ttemplate += radio;\r\n\t\t// template += image;\r\n\t\t// // template += radio;\r\n\t\ttemplate += `</div>`\r\n\r\n\t\treturn template;\r\n\t}\r\n\r\n\tIsSameSelected()\r\n\t{\r\n\t\treturn $(this.SameRadioId()).prop(\"checked\");\r\n\t}\r\n\r\n\tIsDifferentSelected()\r\n\t{\r\n\t\treturn $(this.SameRadioId()).prop(\"checked\");\r\n\t}\r\n\r\n\tprivate SameRadioId() : string\r\n\t{\r\n\t\treturn \"OptionSame\"+this.Id;\r\n\t}\r\n\r\n\tprivate DifferentRadioId() : string\r\n\t{\r\n\t\treturn \"OptionDiff\"+this.Id;\r\n\t}\r\n}\r\n\r\nclass CardDisplay extends TaskDisplay\r\n{\r\n\timageSrc = \"\";\r\n\t\r\n\tconstructor(imageSrc : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.imageSrc = imageSrc;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(`<img src=\"${this.imageSrc}\" alt=\"failed to load image\"/>`);\r\n\t}\r\n\r\n}","import {Task, Option, TaskResult} from \"../../tasks\";\r\nimport {ImageComparison, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class SampleComparison extends Task\r\n{\r\n\tprivate options : Option[];\r\n\r\n\tprivate display : ImageComparison;\r\n\r\n\tconstructor(image1 : string, image2 : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.options = [\r\n\t\t\tnew Option(0, \"Yes\"),\r\n\t\t\tnew Option(1, \"No\")\r\n\t\t];\r\n\r\n\t\tthis.display = new ImageComparison(\r\n\t\t\timage1,\r\n\t\t\timage2\r\n\t\t);\r\n\r\n\t\tthis.SetPrompt(\"Are they the same?\");\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t\tthis.SetResultsTracked(false);\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn this.options;\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn this.display;\r\n\t}\r\n}","import { SampleComparison } from \"./SampleComparison\";\r\n\r\nexport class SampleComparisonInstruction extends SampleComparison\r\n{\r\n\tGetTitle(): string\r\n\t{\r\n\t\treturn \"Instructions\"\r\n\t}\r\n\tGetPrompt() : string\r\n\t{\r\n\t\treturn \"You will be show two images like above, and will be asked whether they are equivalent.<br />\"\r\n\t\t+ \"This is a sample of the test, the results will not be tracked. Choose an option to continue.\";\r\n\t}\r\n\r\n\tIsConfidenceTracked(): boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tIsResultsTracked(): boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n}","import { Option, Task, ImageOption } from \"../../tasks\";\r\nimport { TaskDisplay, UserInterface } from \"../../io\";\r\n\r\nexport class SampleFold extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new ImageOption(0, \"images/foldOptions.png\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new FoldDisplay();\r\n\t}\r\n\t\r\n}\r\n\r\nclass FoldDisplay extends TaskDisplay\r\n{\r\n\ttemplate: string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<img src=\"images/fold1.png\" />`;\r\n\t}\r\n\r\n\tDisplay(screen : UserInterface) : void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import { Option, Task, ImageOption } from \"../../tasks\";\r\nimport { TaskDisplay, UserInterface } from \"../../io\";\r\n\r\nexport class SampleFoldInstruction extends Task\r\n{\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new Option(0, \"Try it out\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new SampleFoldInstructionForm();\r\n\t}\r\n\r\n}\r\n\r\nclass SampleFoldInstructionForm extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<p>You will be shown a piece of paper which will be folded. After at least one fold a hole will be punched in the paper</p>`\r\n\t\t+ `<img src=\"images/fold1.png\" />`\r\n\t\t+ `<p>You will then be shown a set of papers with holes in them</p>`\r\n\t\t+ `<img src=\"images/foldOptions.png\" />`\r\n\t\t+ `<p>Choose what the original piece of paper will look like once it is unfolded</p>`\r\n\t\t;\r\n\t}\r\n\r\n\tDisplay(screen : UserInterface) : void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import {Task, Option, TaskResult, ImageOption} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class SampleImageMockup extends Task\r\n{\r\n\tsrc : string;\r\n\r\n\tconstructor(imagesrc : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.src = imagesrc;\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [];\r\n\t}\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new ImageDisplay(this.src);\r\n\t}\r\n}\r\n\r\nclass ImageDisplay extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor(imagesrc : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<img src=\"${imagesrc}\" alt=\"Failed to load image\" />`;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}"]}