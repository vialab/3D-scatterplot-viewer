{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/Main.ts","src/js/forms/TestingComplete.ts","src/js/io/ImageComparison.ts","src/js/io/TaskDisplay.ts","src/js/io/UserInterface.ts","src/js/io/index.ts","src/js/metrics/index.ts","src/js/metrics/time/LimitedTimer.ts","src/js/metrics/time/Timer.ts","src/js/metrics/time/UnlimitedTimer.ts","src/js/tasks/ImageOption.ts","src/js/tasks/Option.ts","src/js/tasks/Task.ts","src/js/tasks/TaskList.ts","src/js/tasks/TaskResult.ts","src/js/tasks/index.ts","src/js/tests/Sample3DRotation/Sample3DInstructions.ts","src/js/tests/Sample3DRotation/Sample3DRotation.ts","src/js/tests/SampleCard/SampleCard.ts","src/js/tests/SampleCard/SampleCardInstruction.ts","src/js/tests/SampleComparison/SampleComparison.ts","src/js/tests/SampleComparison/SampleComparisonInstruction.ts","src/js/tests/SampleFold/SampleFold.ts","src/js/tests/SampleFold/SampleFoldInstruction.ts","src/js/tests/SampleImageMockup/SampleImageMockup.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","display","testList","task","uiUpdateTimer","TaskList_1","UserInterface_1","SampleComparison_1","SampleComparisonInstruction_1","TestingComplete_1","Sample3DInstructions_1","Sample3DRotation_1","SampleFold_1","SampleFoldInstruction_1","SampleCard_1","SampleImageMockup_1","SampleCardInstruction_1","ApplyPracticeProperties","promptAppend","SetTitle","SetPrompt","GetPrompt","SetCofidenceTracked","SetResultsTracked","NextTask","clearInterval","IsComplete","DisplayTask","TestingComplete","Next","timer","GetTimer","Begin","setInterval","Tick","SetTimerProgress","Math","ceil","Progress","WaitForCompletion","_a","sent","IsResultsTracked","GetTitle","SetOptionsPrompt","ShowOptions","GetDisplay","Display","IsConfidenceTracked","ShowConfidenceSlider","HideConfidenceSlider","$","graphInst","SampleComparisonInstruction","graphPractice","SampleComparison","graphTest","graph3dinst","graph3dTrial","graph3d","piechartInst","piechartTrial","piechart","rotationInst","Sample3DInstruction","rotationTrial","Sample3DRotation","rotation","foldInst","SampleFoldInstruction","foldTrial","SampleFold","fold","cardInst","SampleCardInstruction","cardTrial","SampleCard","card","CONTOUR_PROMPT","contourInst","contourTrial","contour","scatterplotInst","scatterplotTrial","SampleImageMockup","scatterplot","scatterplothover","UserInterface","TaskList","click","_super","tasks_1","io_1","metrics_1","Task","__extends","prototype","OptionSelected","selectedOptions","GetOptions","TestingCompleteDisplay","UnlimitedTimer","this","TaskDisplay","screen","ViewModeTestsComplete","_1","ImageComparison","ViewModeComparison","OriginalViewContainer","html","ImageHtml","originalSrc","ComparisonViewContainer","compareSrc","src","_this","title","titleContainer","prompt","promptContainer","progress","timerBar","css","optionsContainer","options","option","template","Template","element","prop","Id","this_1","append","ContentContainer","contentContainer","originalView","comparisonView","hide","completionContainer","comparisonContainer","show","ViewModeContent","confidenceArea","TaskDisplay_1","ImageComparison_1","Timer_1","Timer","LimitedTimer_1","LimitedTimer","UnlimitedTimer_1","Complete","startTime","ElapsedTime","duration","Date","now","Option_1","ImageOption","Option","imageSrc","id","Name","name","TaskResult_1","promise","resolve","result","reason","reject","SetTimer","track","trackConfidence","trackResults","Promise","TaskResult","tests","currentIndex","ImageOption_1","Task_1","SampleRotationInstructionDisplay","SampleRotationDisplay","CardDisplay","CardOption","SameRadioId","DifferentRadioId","IsSameSelected","IsDifferentSelected","SampleCardInstructionDisplay","image1","image2","FoldDisplay","SampleFoldInstructionForm","ImageDisplay","imagesrc"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {TaskResult} from \"./tasks/TaskResult\";\r\nimport {Task} from \"./tasks/Task\";\r\nimport {TaskList} from \"./tasks/TaskList\";\r\nimport {UserInterface} from \"./io/UserInterface\";\r\n\r\nimport { Timer } from \"./metrics\";\r\nimport {SampleComparison} from \"./tests/SampleComparison/SampleComparison\";\r\nimport {SampleComparisonInstruction} from \"./tests/SampleComparison/SampleComparisonInstruction\";\r\nimport { SampleTimedTest } from \"./tests/SampleTimedTest/SampleTimedTest\";\r\nimport { Consent } from \"./forms/Consent\";\r\nimport { TestingComplete } from \"./forms/TestingComplete\";\r\nimport { Sample3DInstruction } from \"./tests/Sample3DRotation/Sample3DInstructions\";\r\nimport { Sample3DRotation } from \"./tests/Sample3DRotation/Sample3DRotation\";\r\nimport { SampleFold } from \"./tests/SampleFold/SampleFold\";\r\nimport { SampleFoldInstruction } from \"./tests/SampleFold/SampleFoldInstruction\";\r\nimport { SampleCard } from \"./tests/SampleCard/SampleCard\";\r\nimport { SampleImageMockup } from \"./tests/SampleImageMockup/SampleImageMockup\";\r\nimport { SampleCardInstruction } from \"./tests/SampleCard/SampleCardInstruction\";\r\n\r\nlet display : UserInterface;\r\nlet testList : TaskList;\r\nlet task : Task;\r\n\r\nlet uiUpdateTimer : any;\r\n\r\n$(() =>\r\n{\r\n\tlet graphInst = new SampleComparisonInstruction(\r\n\t\t\"images/sample_graph_1.png\",\r\n\t\t\"images/sample_graph_2.png\"\r\n\t);\r\n\tgraphInst.SetPrompt(\"You will be shown two graphs. Select whether the graphs are equivalent.\");\r\n\tlet graphPractice = new SampleComparison(\r\n\t\t\"images/sample_graph_1.png\",\r\n\t\t\"images/sample_graph_2.png\"\r\n\t);\r\n\tApplyPracticeProperties(graphPractice);\r\n\tlet graphTest = new SampleComparison(\r\n\t\t\"images/sample_graph_1.png\",\r\n\t\t\"images/sample_graph_2.png\"\r\n\t);\r\n\r\n\tlet graph3dinst = new SampleComparisonInstruction(\r\n\t\t\"images/3dgraph1.png\",\r\n\t\t\"images/3dgraph2.png\"\r\n\t);\r\n\tgraph3dinst.SetPrompt(\"You will be shown two graphs. Select whether the graphs are equivalent.\");\r\n\tlet graph3dTrial = new SampleComparison(\r\n\t\t\"images/3dgraph1.png\",\r\n\t\t\"images/3dgraph2.png\"\r\n\t);\r\n\tApplyPracticeProperties(graph3dTrial);\r\n\tlet graph3d = new SampleComparison(\r\n\t\t\"images/3dgraph1.png\",\r\n\t\t\"images/3dgraph2.png\"\r\n\t);\r\n\r\n\tlet piechartInst = new SampleComparisonInstruction(\r\n\t\t\"images/sample-piechart.png\",\r\n\t\t\"images/sample-piechart-rotated.png\"\t\r\n\t);\r\n\tpiechartInst.SetPrompt(\r\n\t\t\"You will be shown two pie charts.<br />\"\r\n\t\t+ \"Choose whether the two pie charts represent the same data.\"\r\n\t);\r\n\tlet piechartTrial = new SampleComparison(\r\n\t\t\"images/sample-piechart.png\",\r\n\t\t\"images/sample-piechart-rotated.png\"\t\r\n\t);\r\n\tApplyPracticeProperties(piechartTrial);\r\n\tlet piechart = new SampleComparison(\r\n\t\t\"images/sample-piechart.png\",\r\n\t\t\"images/sample-piechart-rotated.png\"\t\r\n\t);\r\n\r\n\tlet rotationInst = new Sample3DInstruction();\r\n\tlet rotationTrial = new Sample3DRotation();\r\n\tApplyPracticeProperties(rotationTrial);\r\n\tlet rotation = new Sample3DRotation();\r\n\r\n\tlet foldInst = new SampleFoldInstruction();\r\n\tlet foldTrial = new SampleFold();\r\n\tApplyPracticeProperties(foldTrial);\r\n\tlet fold = new SampleFold();\r\n\t\r\n\tlet cardInst = new SampleCardInstruction();\r\n\tlet cardTrial = new SampleCard();\r\n\tApplyPracticeProperties(cardTrial);\r\n\tlet card = new SampleCard();\r\n\t\r\n\tlet CONTOUR_PROMPT = \"Does the 3d plot represent the isocontour?\";\r\n\tlet contourInst = new SampleComparisonInstruction(\r\n\t\t\"images/Contour_Plot.jpg\",\r\n\t\t\"images/3D_Surface.jpg\"\r\n\t);\r\n\tcontourInst.SetPrompt(\r\n\t\t\"You will be shown a 2D Isocontour of a graph, and a 3D graph.<br />\"\r\n\t\t+ \"Specify whether the 3D graph shown is representitave of the isocontour provided.\"\r\n\t);\r\n\tlet contourTrial = new SampleComparison(\r\n\t\t\"images/Contour_Plot.jpg\",\r\n\t\t\"images/3D_Surface.jpg\"\r\n\t);\r\n\tcontourTrial.SetPrompt(CONTOUR_PROMPT);\r\n\tApplyPracticeProperties(contourTrial);\r\n\tlet contour = new SampleComparison(\r\n\t\t\"images/Contour_Plot.jpg\",\r\n\t\t\"images/3D_Surface.jpg\"\r\n\t);\r\n\tcontour.SetPrompt(CONTOUR_PROMPT);\r\n\r\n\tlet scatterplotInst = new SampleComparisonInstruction(\r\n\t\t\"images/scatterplotmain.png\",\r\n\t\t\"images/scatterplothover.png\"\r\n\t);\r\n\tscatterplotInst.SetPrompt(\r\n\t\t\"You will be shown the orthographic view of a scatter plot and the 3d scatter plot corresponding to it. Choose the plane from which the orthographic view is from.<br />\"\r\n\t\t+ \"Hovering a square of the net will highlight the corresponding plane on the viewing cube. Click that plane to select it.\"\r\n\t)\r\n\tlet scatterplotTrial = new SampleImageMockup(\"images/scatterplotmain.png\");\r\n\tscatterplotTrial.SetCofidenceTracked(true);\r\n\tApplyPracticeProperties(scatterplotTrial);\r\n\tlet scatterplot = new SampleImageMockup(\"images/scatterplotmain.png\");\r\n\tscatterplot.SetCofidenceTracked(true);\r\n\tlet scatterplothover = new SampleImageMockup(\"images/scatterplothover.png\");\r\n\tscatterplothover.SetCofidenceTracked(true);\r\n\r\n\tdisplay = new UserInterface();\r\n\ttestList  = new TaskList([\r\n\t\t// new Consent(),\r\n\r\n\t\t//Graph\r\n\t\tgraphInst,\r\n\t\tgraphPractice,\r\n\t\tgraphTest,\r\n\r\n\t\t//3D Graph\r\n\t\tgraph3dinst,\r\n\t\tgraph3dTrial,\r\n\t\tgraph3d,\r\n\r\n\t\t//Piechart\r\n\t\tpiechartInst,\r\n\t\tpiechartTrial,\r\n\t\tpiechart,\r\n\r\n\t\t//3d Rotation\r\n\t\trotationInst,\r\n\t\trotationTrial,\r\n\t\trotation,\r\n\r\n\t\t// Paper Folding\r\n\t\tfoldInst,\r\n\t\tfoldTrial,\r\n\t\tfold,\r\n\r\n\t\t// Card rotation\r\n\t\tcardInst,\r\n\t\tcardTrial,\r\n\t\tcard,\r\n\r\n\t\t// Contour\r\n\t\tcontourInst,\r\n\t\tcontourTrial,\r\n\t\tcontour,\r\n\r\n\t\t//Scatter Plot\r\n\t\tscatterplotInst,\r\n\t\tscatterplotTrial,\r\n\t\tscatterplot,\r\n\t\tscatterplothover,\r\n\t]);\r\n\r\n\tApplyPageEventHandlers();\r\n\t\r\n\tNextTask();\r\n});\r\n\r\nfunction ApplyPracticeProperties(task : Task)\r\n{\r\n\tlet promptAppend = \"&#9888; This is an example of the test you are about to do. Results of this test are not tracked.\";\r\n\r\n\ttask.SetTitle(\"Instructions\");\r\n\ttask.SetPrompt(\r\n\t\ttask.GetPrompt() != \"\"?\r\n\t\t\ttask.GetPrompt() + \"<br />\" + promptAppend\r\n\t\t\t: promptAppend\r\n\t);\r\n\ttask.SetCofidenceTracked(true);\r\n\ttask.SetResultsTracked(false);\r\n}\r\n\r\nfunction ApplyPageEventHandlers()\r\n{\r\n\t$(\".next\").click(() =>\r\n\t{\r\n\t\tNextTask();\r\n\t});\r\n}\r\n\r\nasync function NextTask() : Promise<void>\r\n{\r\n\tclearInterval(uiUpdateTimer);\r\n\r\n\tif (testList.IsComplete())\r\n\t{\r\n\t\tAllTestsCompleted();\r\n\t\treturn;\r\n\t}\r\n\r\n\ttask = testList.Next();\r\n\tlet timer : Timer = task.GetTimer();\r\n\r\n\tDisplayTask(task);\r\n\t\r\n\ttimer.Begin();\r\n\tuiUpdateTimer = setInterval(() =>\r\n\t\t{\r\n\t\t\t//TODO js setinterval is inconsistent, timer is jumpy at points\r\n\t\t\t//  Possible solutions:\r\n\t\t\t//     - Really low time interval (timers internally use accurate time so they'll be fine)\r\n\t\t\t//     so function runs more\r\n\t\t\t//     - Look for more consistent timer implementation\r\n\t\t\ttimer.Tick();\r\n\t\t\tdisplay.SetTimerProgress(Math.ceil(timer.Progress()));\r\n\t\t},\r\n\t\t10\r\n\t);\r\n\t\r\n\tlet result : TaskResult = await task.WaitForCompletion();\r\n\r\n\tif (task.IsResultsTracked())\r\n\t{\r\n\t\t//TODO submit results somewhere\r\n\t}\r\n\r\n\tNextTask();\r\n}\r\n\r\nfunction AllTestsCompleted()\r\n{\r\n\tDisplayTask(new TestingComplete());\r\n}\r\n\r\nfunction DisplayTask(task : Task)\r\n{\r\n\tdisplay.SetTitle(task.GetTitle());\r\n\tdisplay.SetOptionsPrompt(task.GetPrompt());\r\n\tdisplay.ShowOptions(task);\r\n\ttask.GetDisplay().Display(display);\r\n\r\n\tif (task.IsConfidenceTracked())\r\n\t\tdisplay.ShowConfidenceSlider();\r\n\telse\r\n\t\tdisplay.HideConfidenceSlider();\r\n}","import { Task, Option, TaskResult } from \"../tasks\";\r\nimport { UserInterface, TaskDisplay } from \"../io\";\r\nimport { Timer, UnlimitedTimer } from \"../metrics\";\r\n\r\nexport class TestingComplete extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthrow new Error(\"Method not implemented.\");\r\n\t}\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new TestingCompleteDisplay();\r\n\t}\r\n\r\n\tGetTimer(): Timer\r\n\t{\r\n\t\treturn new UnlimitedTimer();\r\n\t}\r\n}\r\n\r\nclass TestingCompleteDisplay extends TaskDisplay\r\n{\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeTestsComplete();\r\n\t}\r\n}","import { TaskDisplay, UserInterface } from \".\";\r\n\r\nexport class ImageComparison extends TaskDisplay\r\n{\r\n\tprivate originalSrc : string;\r\n\tprivate compareSrc : string;\r\n\r\n\tconstructor(originalSrc : string, compareSrc : string)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.originalSrc = originalSrc;\r\n\t\tthis.compareSrc = compareSrc;\r\n\t}\r\n\r\n\tDisplay(screen : UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeComparison();\r\n\r\n\t\tscreen.OriginalViewContainer()\r\n\t\t\t.html(this.ImageHtml(this.originalSrc));\r\n\t\t\r\n\t\tscreen.ComparisonViewContainer()\r\n\t\t\t.html(this.ImageHtml(this.compareSrc));\r\n\t}\r\n\r\n\tprivate ImageHtml(src : string)\r\n\t{\r\n\t\treturn `<img src=\"${src}\" alt=\"Failed to load image\" style=\"height: 100%; max-height: 500px;\"/>`;\r\n\t}\r\n}","import {UserInterface} from \"./UserInterface\";\r\n\r\nexport abstract class TaskDisplay\r\n{\r\n\tabstract Display(screen : UserInterface) : void;\r\n}","import {Option, Task} from \"../tasks\";\r\n\r\nexport class UserInterface\r\n{\r\n\tprotected titleContainer : JQuery<HTMLElement>;\r\n\tprotected promptContainer : JQuery<HTMLElement>;\r\n\tprotected timerBar : JQuery<HTMLElement>;\r\n\tprotected optionsContainer : JQuery<HTMLElement>;\r\n\t\r\n\tprotected contentContainer : JQuery<HTMLElement>;\r\n\r\n\tprotected comparisonContainer : JQuery<HTMLElement>;\r\n\tprotected originalView : JQuery<HTMLElement>\r\n\tprotected comparisonView : JQuery<HTMLElement>;\r\n\r\n\tprotected completionContainer : JQuery<HTMLElement>;\r\n\r\n\tprotected confidenceArea : JQuery<HTMLElement>;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.titleContainer = $(\"#title\");\r\n\t\tthis.promptContainer = $(\"#prompt\");\r\n\t\tthis.timerBar = $(\"#test-timer\");\r\n\t\tthis.optionsContainer = $(\"#options\");\r\n\r\n\t\tthis.contentContainer = $(\"#content-single\");\r\n\r\n\t\tthis.comparisonContainer = $(\"#comparison-area\");;\r\n\t\tthis.originalView = $(\"#test-original\");\r\n\t\tthis.comparisonView = $(\"#test-compare\");\r\n\r\n\t\tthis.completionContainer = $(\"#completion-window\");\r\n\r\n\t\tthis.confidenceArea = $(\"#feedback\");\r\n\t}\r\n\r\n\tSetTitle(title : string) : void\r\n\t{\r\n\t\tthis.titleContainer.html(title);\r\n\t}\r\n\r\n\tSetOptionsPrompt(prompt : string) : void\r\n\t{\r\n\t\tthis.promptContainer.html(prompt);\r\n\t}\r\n\r\n\tSetTimerProgress(progress : number) : void\r\n\t{\r\n\t\tthis.timerBar.css(\"width\", progress + \"%\");\r\n\t}\r\n\r\n\tShowOptions(task : Task) : void\r\n\t{\r\n\t\tthis.optionsContainer.html(\"\");\r\n\r\n\t\tlet options = task.GetOptions();\r\n\r\n\t\tfor (let i = 0; i < options.length; i++)\r\n\t\t{\r\n\t\t\tlet option = options[i];\r\n\t\t\tlet template = options[i].Template();\r\n\t\t\tlet element = $(template);\r\n\r\n\t\t\telement.prop(\"data-option-id\", option.Id);\r\n\t\t\telement.click(() =>\r\n\t\t\t{\r\n\t\t\t\ttask.OptionSelected(option);\r\n\t\t\t});\r\n\r\n\t\t\tthis.optionsContainer.append(element);\r\n\t\t}\r\n\t}\r\n\r\n\tContentContainer() : JQuery<HTMLElement>\r\n\t{\r\n\t\treturn this.contentContainer;\r\n\t}\r\n\r\n\tOriginalViewContainer() : JQuery<HTMLElement>\r\n\t{\r\n\t\treturn this.originalView;\r\n\t}\r\n\r\n\tComparisonViewContainer() : JQuery<HTMLElement>\r\n\t{\r\n\t\treturn this.comparisonView;\r\n\t}\r\n\r\n\tViewModeComparison()\r\n\t{\r\n\t\tthis.contentContainer.hide();\r\n\t\tthis.completionContainer.hide();\r\n\r\n\t\tthis.comparisonContainer.show();\r\n\t}\r\n\r\n\tViewModeContent()\r\n\t{\r\n\t\tthis.comparisonContainer.hide();\r\n\t\tthis.completionContainer.hide();\r\n\r\n\t\tthis.contentContainer.show();\r\n\t}\r\n\r\n\tViewModeTestsComplete()\r\n\t{\r\n\t\tthis.comparisonContainer.hide();\r\n\t\tthis.contentContainer.hide();\r\n\t\t\r\n\t\tthis.completionContainer.show();\r\n\t}\r\n\r\n\tShowConfidenceSlider()\r\n\t{\r\n\t\tthis.confidenceArea.show();\r\n\t}\r\n\r\n\tHideConfidenceSlider()\r\n\t{\r\n\t\tthis.confidenceArea.hide();\r\n\t}\r\n}","import {UserInterface} from \"./UserInterface\";\r\nimport {TaskDisplay} from \"./TaskDisplay\";\r\n\r\nimport {ImageComparison} from \"./ImageComparison\";\r\n\r\nexport {\r\n\tUserInterface,\r\n\tTaskDisplay,\r\n\t\r\n\tImageComparison\r\n}","import {Timer} from \"./time/Timer\";\r\nimport {LimitedTimer} from \"./time/LimitedTimer\";\r\nimport {UnlimitedTimer} from \"./time/UnlimitedTimer\";\r\n\r\nexport {\r\n\tTimer,\r\n\tLimitedTimer,\r\n\tUnlimitedTimer\r\n};","import {Timer} from \"./Timer\";\r\nimport {Task, TaskResult} from \"../../tasks\";\r\n\r\nexport class LimitedTimer extends Timer\r\n{\r\n\tprivate duration : number;\r\n\tprivate task : Task;\r\n\r\n\tconstructor(task : Task, duration: number)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.task = task;\r\n\t\tthis.duration = duration;\r\n\t}\r\n\r\n\tTick()\r\n\t{\r\n\t\tif (this.Progress() >= 100)\r\n\t\t{\r\n\t\t\t//TODO make special result for timeout?\r\n\t\t\tthis.task.Complete();\r\n\t\t}\r\n\t}\r\n\r\n\tProgress(): number\r\n\t{\r\n\t\tlet progress : number = this.startTime == 0? 0 : (this.ElapsedTime() / this.duration) * 100;\r\n\t\tprogress = progress > 100? 100 : progress;\r\n\r\n\t\treturn progress;\r\n\t}\r\n}","export abstract class Timer\r\n{\r\n\tprotected startTime : number;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.startTime = 0;\r\n\t}\r\n\r\n\tBegin() : void\r\n\t{\r\n\t\tthis.startTime = Date.now();\r\n\t}\r\n\r\n\tElapsedTime() : number\r\n\t{\r\n\t\treturn Date.now() - this.startTime;\r\n\t}\r\n\r\n\tabstract Tick() : void;\r\n\tabstract Progress() : number;\r\n}","import {Timer} from \"./Timer\";\r\n\r\nexport class UnlimitedTimer extends Timer\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t}\r\n\r\n\tTick() : void\r\n\t{\r\n\t}\r\n\r\n\tProgress(): number\r\n\t{\r\n\t\treturn 0;\r\n\t}\r\n}","import {Option} from \"./Option\";\r\n\r\nexport class ImageOption extends Option\r\n{\r\n\timageSrc : string;\r\n\r\n\tconstructor (id: number, imageSrc : string)\r\n\t{\r\n\t\tsuper(id, \"\");\r\n\t\tthis.imageSrc = imageSrc;\r\n\t}\r\n\r\n\tTemplate() : string\r\n\t{\r\n\t\treturn `<div style=\"flex: 1; display: flex; justify-content: center; cursor: pointer;\"><img src=\"${this.imageSrc}\" /></div>`\r\n\t}\r\n}","export class Option\r\n{\r\n\tId: number;\r\n\tName : string;\r\n\r\n\tconstructor(id : number, name : string)\r\n\t{\r\n\t\tthis.Id = id;\r\n\t\tthis.Name = name;\r\n\t}\r\n\r\n\tTemplate() : string\r\n\t{\r\n\t\t//TODO add onclick that can actually end the test\r\n\t\treturn `<button type=\"button\" class=\"btn btn-primary\">${this.Name}</button>`;\r\n\t}\r\n}","import {Option} from \"./Option\";\r\nimport {TaskResult} from \"./TaskResult\";\r\nimport {TaskDisplay} from \"../io\";\r\nimport {Timer, UnlimitedTimer} from \"../metrics\";\r\n\r\nexport abstract class Task\r\n{\r\n\tprotected result : TaskResult;\r\n\r\n\tprivate promise : Promise<TaskResult>;\r\n\tprotected resolve : (result : TaskResult) => any;\r\n\tprotected reject : (reason : any) => any;\r\n\r\n\tprivate title : string;\r\n\tprivate prompt : string;\r\n\tprivate timer : Timer;\r\n\tprivate trackConfidence : boolean;\r\n\tprivate trackResults : boolean;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tthis.resolve = (result : TaskResult) => null;\r\n\t\tthis.reject = (reason : any) => null;\r\n\r\n\t\tthis.promise = new Promise<TaskResult>((resolve, reject) =>\r\n\t\t{\r\n\t\t\tthis.resolve = resolve;\r\n\t\t\tthis.reject = reject;\r\n\t\t});\r\n\t\t\r\n\t\tthis.result = new TaskResult();\r\n\r\n\t\tthis.title = \"\";\r\n\t\tthis.prompt = \"\";\r\n\t\tthis.timer = new UnlimitedTimer();\r\n\t\tthis.trackConfidence = false;\r\n\t\tthis.trackResults = false;\r\n\t}\r\n\r\n\tasync WaitForCompletion() : Promise<TaskResult>\r\n\t{\r\n\t\treturn this.promise;\r\n\t}\r\n\r\n\tComplete() : void\r\n\t{\r\n\t\tthis.resolve(this.result);\r\n\t}\r\n\r\n\tError(reason : any)\r\n\t{\r\n\t\tthis.reject(reason);\r\n\t}\r\n\r\n\tabstract OptionSelected(selectedOptions : Option) : void;\r\n\r\n\tabstract GetOptions() : Option[];\r\n\tabstract GetDisplay() : TaskDisplay;\r\n\r\n\tSetTitle(title : string) : void\r\n\t{\r\n\t\tthis.title = title;\r\n\t}\r\n\r\n\tGetTitle() : string\r\n\t{\r\n\t\treturn this.title;\r\n\t}\r\n\r\n\tSetPrompt(prompt : string) : void\r\n\t{\r\n\t\tthis.prompt = prompt;\t\r\n\t}\r\n\tGetPrompt() : string\r\n\t{\r\n\t\treturn this.prompt;\r\n\t}\r\n\r\n\tSetTimer(timer : Timer) : void\r\n\t{\r\n\t\tthis.timer = timer;\r\n\t}\r\n\tGetTimer() : Timer\r\n\t{\r\n\t\treturn this.timer;\r\n\t}\r\n\r\n\tSetCofidenceTracked(track : boolean) : void\r\n\t{\r\n\t\tthis.trackConfidence = track;\t\r\n\t}\r\n\tIsConfidenceTracked() : boolean\r\n\t{\r\n\t\treturn this.trackConfidence;\r\n\t}\r\n\r\n\tSetResultsTracked(track : boolean) : void\r\n\t{\r\n\t\tthis.trackResults = track;\t\r\n\t}\r\n\tIsResultsTracked() : boolean\r\n\t{\r\n\t\treturn this.trackResults;\r\n\t}\r\n}","import {Task} from \"./Task\";\r\n\r\nexport class TaskList\r\n{\r\n\tcurrentIndex : number;\r\n\ttests : Task[];\r\n\r\n\tconstructor(tests : Task[])\r\n\t{\r\n\t\tthis.currentIndex = 0;\r\n\t\tthis.tests = tests;\r\n\t}\r\n\r\n\tNext() : Task\r\n\t{\r\n\t\treturn this.tests[this.currentIndex++];\r\n\t}\r\n\r\n\tIsComplete() : boolean\r\n\t{\r\n\t\treturn this.currentIndex >= this.tests.length;\r\n\t}\r\n}","export class TaskResult\r\n{\r\n\t//TODO flesh out metrics we'll track for test results\r\n}","import {Option} from \"./Option\";\r\nimport {ImageOption} from \"./ImageOption\";\r\nimport {TaskResult} from \"./TaskResult\";\r\nimport {Task} from \"./Task\";\r\nimport {TaskList} from \"./TaskList\";\r\n\r\nexport {\r\n\tOption,\r\n\tImageOption,\r\n\tTaskResult,\r\n\tTask,\r\n\tTaskList\r\n};","import {Task, Option, TaskResult} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class Sample3DInstruction extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.SetTitle(\"Instructions\");\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new Option(0, \"Try it out\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new SampleRotationInstructionDisplay();\r\n\t}\r\n\r\n\tGetTimer(): Timer\r\n\t{\r\n\t\treturn new UnlimitedTimer();\r\n\t}\r\n}\r\n\r\nclass SampleRotationInstructionDisplay extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<p>You will be shown an image of a 3d object which has been rotated</p>`\r\n\t\t+ `<img src=\"images/rotation1.png\" />`\r\n\t\t+ `<p>You will then be shown another 3d object, and a set of rotated versions of that object</p>`\r\n\t\t+ `<img src=\"images/rotation2.png\" />`\r\n\t\t+ `<img src=\"images/rotationOptions.png\" />`\r\n\t\t+ `<p>choose the image that represents an equivalent roation from the first object on the second one</p>`\r\n\t\t;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import {Task, Option, TaskResult, ImageOption} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class Sample3DRotation extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t\tthis.SetResultsTracked(false);\r\n\t}\r\n\t\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new ImageOption(0, \"images/rotationOptions.png\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new SampleRotationDisplay();\r\n\t}\r\n}\r\n\r\nclass SampleRotationDisplay extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template =\r\n\t\t\t`<div style=\"display: flex; flex-direction: column; justify-content: end; height: 100%;\">\r\n\t\t\t\t<img src=\"images/rotation1.png\" />\r\n\t\t\t\t<img src=\"images/rotation2.png\" />\r\n\t\t\t</div>`\r\n\t\t\t;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import {Task, Option, ImageOption, TaskResult} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class SampleCard extends Task\r\n{\r\n\tprivate options : Option[];\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.options = [\r\n\t\t\tnew CardOption(0, \"images/cardOpt1.png\"),\r\n\t\t\tnew CardOption(1, \"images/cardOpt2.png\"),\r\n\t\t\tnew CardOption(2, \"images/cardOpt3.png\"),\r\n\t\t\tnew CardOption(3, \"images/cardOpt4.png\"),\r\n\t\t];\r\n\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn this.options;\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new CardDisplay(\"images/card.png\");\r\n\t}\r\n}\r\n\r\nclass CardOption extends ImageOption\r\n{\r\n\tTemplate() : string\r\n\t{\r\n\t\tlet template = `<div style=\"flex: 1; display: flex; justify-content: center; align-items: center; flex-direction: column;\">\r\n\t\t\t<img src=\"${this.imageSrc}\" style=\"width: 100px; height: 100px;\"/>`\r\n\r\n\t\tlet radio = `\r\n\t\t<div>\r\n\t\t\t<input type=\"radio\" id=\"${this.SameRadioId()}\" name=\"${this.Id}\" value=\"${this.SameRadioId()}\" />\r\n\t\t\t<label for=\"${this.SameRadioId()}\">Same</label><br />\r\n\r\n\t\t\t<input type=\"radio\" id=\"${this.DifferentRadioId()}\" name=\"${this.Id}\" value=\"${this.DifferentRadioId()}\" />\r\n\t\t\t<label for=\"${this.DifferentRadioId()}\">Different</label>\r\n\t\t</div>\r\n\t\t`;\r\n\t\ttemplate += radio;\r\n\t\t// template += image;\r\n\t\t// // template += radio;\r\n\t\ttemplate += `</div>`\r\n\r\n\t\treturn template;\r\n\t}\r\n\r\n\tIsSameSelected()\r\n\t{\r\n\t\treturn $(this.SameRadioId()).prop(\"checked\");\r\n\t}\r\n\r\n\tIsDifferentSelected()\r\n\t{\r\n\t\treturn $(this.SameRadioId()).prop(\"checked\");\r\n\t}\r\n\r\n\tprivate SameRadioId() : string\r\n\t{\r\n\t\treturn \"OptionSame\"+this.Id;\r\n\t}\r\n\r\n\tprivate DifferentRadioId() : string\r\n\t{\r\n\t\treturn \"OptionDiff\"+this.Id;\r\n\t}\r\n}\r\n\r\nclass CardDisplay extends TaskDisplay\r\n{\r\n\timageSrc : string;\r\n\ttemplate : string;\r\n\t\r\n\tconstructor(imageSrc : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.imageSrc = imageSrc;\r\n\t\tthis.template = `\r\n\t\t<div style=\"display: flex; height: 100%; align-items: end; padding-bottom:100px;\">\r\n\t\t\t<img src=\"${this.imageSrc}\" style=\"width: 100px; height: 100px;\" alt=\"failed to load image\"/>\r\n\t\t</div>\r\n\t\t`\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n\r\n}","import {Task, Option, TaskResult} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class SampleCardInstruction extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.SetTitle(\"Instructions\");\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new Option(0, \"Try it out\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new SampleCardInstructionDisplay();\r\n\t}\r\n\r\n\tGetTimer(): Timer\r\n\t{\r\n\t\treturn new UnlimitedTimer();\r\n\t}\r\n}\r\n\r\nclass SampleCardInstructionDisplay extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<p>You will be shown a 2d card</p>`\r\n\t\t+ `<img src=\"images/card.png\" style=\"width: 75px; height: 75px;\"/>`\r\n\t\t+ `<p>That card will be followed by a series of shapes</p>`\r\n\t\t+ `<div style=\"display: flex;\">`\r\n\t\t+ `<img src=\"images/cardOpt1.png\" style=\"flex: 1; width: 75px; height: 75px;\"/>`\r\n\t\t+ `<img src=\"images/cardOpt2.png\" style=\"flex: 1;width: 75px; height: 75px;\"/>`\r\n\t\t+ `<img src=\"images/cardOpt3.png\" style=\"flex: 1;width: 75px; height: 75px;\"/>`\r\n\t\t+ `<img src=\"images/cardOpt4.png\" style=\"flex: 1;width: 75px; height: 75px;\"/>`\r\n\t\t+ `</div>`\r\n\t\t+ `<p>You will be asked to specify whether each shape is different from or the same as the original</p>`\r\n\t\t;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import {Task, Option, TaskResult} from \"../../tasks\";\r\nimport {ImageComparison, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class SampleComparison extends Task\r\n{\r\n\tprivate options : Option[];\r\n\r\n\tprivate display : ImageComparison;\r\n\r\n\tconstructor(image1 : string, image2 : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.options = [\r\n\t\t\tnew Option(0, \"Yes\"),\r\n\t\t\tnew Option(1, \"No\")\r\n\t\t];\r\n\r\n\t\tthis.display = new ImageComparison(\r\n\t\t\timage1,\r\n\t\t\timage2\r\n\t\t);\r\n\r\n\t\tthis.SetPrompt(\"Are they the same?\");\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t\tthis.SetResultsTracked(false);\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn this.options;\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn this.display;\r\n\t}\r\n}","import { SampleComparison } from \"./SampleComparison\";\r\nimport { Task, Option } from \"../../tasks\";\r\nimport { TaskDisplay, ImageComparison } from \"../../io\";\r\n\r\nexport class SampleComparisonInstruction extends Task\r\n{\r\n\tdisplay : ImageComparison;\r\n\r\n\tconstructor(image1 : string, image2 : string)\r\n\t{\r\n\t\tsuper();\r\n\r\n\t\tthis.SetTitle(\"Instructions\");\r\n\t\tthis.SetPrompt(\"You will be show two images like above, and will be asked whether they are equivalent.\");\r\n\r\n\t\tthis.display = new ImageComparison(\r\n\t\t\timage1,\r\n\t\t\timage2\r\n\t\t);\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[] {\r\n\t\treturn [new Option(0, \"Try it out\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn this.display;\r\n\t}\r\n\r\n\tIsConfidenceTracked(): boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n\tIsResultsTracked(): boolean\r\n\t{\r\n\t\treturn false;\r\n\t}\r\n}","import { Option, Task, ImageOption } from \"../../tasks\";\r\nimport { TaskDisplay, UserInterface } from \"../../io\";\r\n\r\nexport class SampleFold extends Task\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.SetCofidenceTracked(true);\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new ImageOption(0, \"images/foldOptions.png\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new FoldDisplay();\r\n\t}\r\n\t\r\n}\r\n\r\nclass FoldDisplay extends TaskDisplay\r\n{\r\n\ttemplate: string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<img src=\"images/fold1.png\" />`;\r\n\t}\r\n\r\n\tDisplay(screen : UserInterface) : void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import { Option, Task, ImageOption } from \"../../tasks\";\r\nimport { TaskDisplay, UserInterface } from \"../../io\";\r\n\r\nexport class SampleFoldInstruction extends Task\r\n{\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t\tthis.Complete();\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [new Option(0, \"Try it out\")];\r\n\t}\r\n\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new SampleFoldInstructionForm();\r\n\t}\r\n\r\n}\r\n\r\nclass SampleFoldInstructionForm extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<p>You will be shown a piece of paper which will be folded. After at least one fold a hole will be punched in the paper</p>`\r\n\t\t+ `<img src=\"images/fold1.png\" />`\r\n\t\t+ `<p>You will then be shown a set of papers with holes in them</p>`\r\n\t\t+ `<img src=\"images/foldOptions.png\" />`\r\n\t\t+ `<p>Choose what the original piece of paper will look like once it is unfolded</p>`\r\n\t\t;\r\n\t}\r\n\r\n\tDisplay(screen : UserInterface) : void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}","import {Task, Option, TaskResult, ImageOption} from \"../../tasks\";\r\nimport {UserInterface, TaskDisplay} from \"../../io\";\r\nimport {Timer, UnlimitedTimer} from \"../../metrics\";\r\n\r\nexport class SampleImageMockup extends Task\r\n{\r\n\tsrc : string;\r\n\r\n\tconstructor(imagesrc : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.src = imagesrc;\r\n\t}\r\n\r\n\tOptionSelected(selectedOptions: Option): void\r\n\t{\r\n\t}\r\n\r\n\tGetOptions(): Option[]\r\n\t{\r\n\t\treturn [];\r\n\t}\r\n\tGetDisplay(): TaskDisplay\r\n\t{\r\n\t\treturn new ImageDisplay(this.src);\r\n\t}\r\n}\r\n\r\nclass ImageDisplay extends TaskDisplay\r\n{\r\n\ttemplate : string;\r\n\r\n\tconstructor(imagesrc : string)\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.template = `<img src=\"${imagesrc}\" alt=\"Failed to load image\" class=\"fit\"/>`;\r\n\t}\r\n\r\n\tDisplay(screen: UserInterface): void\r\n\t{\r\n\t\tscreen.ViewModeContent();\r\n\t\tscreen.ContentContainer().html(this.template);\r\n\t}\r\n}"]}